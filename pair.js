const { default: makeWASocket, useMultiFileAuthState } = require('@whiskeysockets/baileys');
const { Server } = require('socket.io');
const http = require('http');

// Create basic HTTP server for Socket.io
const server = http.createServer();
const io = new Server(server, {
  cors: {
    origin: "*", // Allow all origins (adjust if needed)
  }
});

server.listen(3001, () => {
  console.log("üåê Socket.io server ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∫‡∑í: http://localhost:3001");
});

async function pairSystem() {
  const { state, saveCreds } = await useMultiFileAuthState('./auth_info');

  const sock = makeWASocket({
    auth: state,
    printQRInTerminal: true,
  });

  sock.ev.on('connection.update', (update) => {
    const { connection, qr } = update;

    if (qr) {
      console.log("üì± QR code ‡∂ë‡∂ö ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑è. UI ‡∂ë‡∂ö‡∂ß emit ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è...");
      io.emit("qr", qr); // Send QR string to frontend
    }

    if (connection === 'open') {
      console.log("‚úÖ WhatsApp ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è‡∑Ä‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í!");
      io.emit("connected");
    }

    if (connection === 'close') {
      console.log("‚ùå ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í.");
      io.emit("error");
    }
  });

  sock.ev.on('creds.update', saveCreds);
}

module.exports = { pairSystem };
